(load "kadena_repl_sandbox/kda-env/init.repl")
(load "init.repl")


; Init on a not supply chain => Rollback after
(begin-tx)
(use BRO_NS.bro)
(env-sigs [{'key:"gov", 'caps:[(INIT)]}])

; Try to init on a supply chain
(env-chain-data {"chain-id":"2"})
(expect-failure "Not the right chain" "non-supply chain"
                (init))

; And on the right chain
(env-chain-data {"chain-id":"1"})
(init)

; A second time
(expect-failure "Init only once" "Already intialized"
                (init))
(rollback-tx)

(begin-tx)
(use BRO_NS.bro)
(env-sigs [{'key:"gov", 'caps:[(INIT)]}])

(env-data {'ks-ps:["pres-sales-key"], 'ks-tr:["treasury-key"], 'ks-liqu:["liquidity-key"] })

; Try on bad chain
(env-chain-data {"chain-id":"13"})

(expect-failure "Bad chain" "supply chain"
                (init-supply "pre-sales" (read-keyset 'ks-ps)
                             "treasury"  (read-keyset 'ks-tr)
                             "liquidity" (read-keyset 'ks-liqu)))

; On good chain
(env-chain-data {"chain-id":"2"})
(init-supply "pre-sales" (read-keyset 'ks-ps)
             "treasury"  (read-keyset 'ks-tr)
             "liquidity" (read-keyset 'ks-liqu))

; A second time
(expect-failure "Init only once" "Already intialized"
                (init-supply "pre-sales" (read-keyset 'ks-ps)
                             "treasury"  (read-keyset 'ks-tr)
                             "liquidity" (read-keyset 'ks-liqu)))




(expect "Balance of pre-sales" 40.0 (get-balance "pre-sales"))
(expect "Balance of treasury" 20.0 (get-balance "treasury"))
(expect "Balance of liquidity" 40.0 (get-balance "liquidity"))

(expect-that "KS of pre-sales" (compose (at 'guard) (= (read-keyset 'ks-ps))) (details "pre-sales"))
(expect-that "KS of treasury" (compose (at 'guard) (= (read-keyset 'ks-tr))) (details "treasury"))
(expect-that "KS of liquidity" (compose (at 'guard) (= (read-keyset 'ks-liqu))) (details "liquidity"))

(commit-tx)
